package mnj.ont.model.services;

import java.awt.Color;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;


import javax.swing.text.Style;

import mnj.mfg.model.lov.views.FillChemicalPopUpVOImpl;
import mnj.mfg.model.lov.views.NewFillOperationPopUpImpl;
import mnj.mfg.model.lov.views.RecipeVersionVOImpl;
import mnj.mfg.model.lov.views.ShipmentDetilVoImpl;



import mnj.mfg.model.lov.views.SubProcessPopUpVOImpl;
import mnj.mfg.model.views.LineVOStyleDetailImpl;
import mnj.mfg.model.views.LineVOStyleDetailRowImpl;

import mnj.ont.model.services.common.AppModule;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 05 18:13:25 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */

    public static final int VARCHAR2 = OracleTypes.VARCHAR;
    public static final int INTEGER = OracleTypes.INTEGER;

    public AppModuleImpl() {
    }

    /**
     * Container's getter for HederVO1.
     * @return HederVO1
     */
    public ViewObjectImpl getHederVO1() {
        return (ViewObjectImpl)findViewObject("HederVO1");
    }

    /**
     * Container's getter for LineVOStyleDetail1.
     * @return LineVOStyleDetail1
     */
    public ViewObjectImpl getLineVOStyleDetail1() {
        return (ViewObjectImpl)findViewObject("LineVOStyleDetail1");
    }


    /**
     * Container's getter for MnjGwpMfgObslineFkLink1.
     * @return MnjGwpMfgObslineFkLink1
     */
    public ViewLinkImpl getMnjGwpMfgObslineFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjGwpMfgObslineFkLink1");
    }


    public void findSelLines() {

        ViewObject vo = getShipmentDetilVo1();
        System.out.println("Lines in VO--->" + vo.getRowCount());

        RowSetIterator it = vo.createRowSetIterator("aa");

        while (it.hasNext()) {

            Row r = it.next();

            try {
                r.getAttribute("MultiSelect").toString();
                populateLines(r);
            } catch (Exception e) {
                ;
            }

            //populateLines(r);

        }

        it.closeRowSetIterator();


    } //findSelLines


    public void populateOrderLines(String saleOrderID) {

        System.out.println("Sale Order id in AM--->" + saleOrderID);
        ViewObject populatevo = getShipmentDetilVo1();
        populatevo.setWhereClause("HEADER_ID = " + saleOrderID);

        populatevo.executeQuery();

    } //end of populateOrderLines method

    public void populateLines(Row poprow) {

        Row linerow = createLines();

        linerow.setAttribute("InventoryItemId",
                             getPopulateValue(poprow, "InventoryItemId"));
        linerow.setAttribute("ShipmentQty",
                             getPopulateValue(poprow, "ShippedQuantity"));
        linerow.setAttribute("SoLineId", getPopulateValue(poprow, "LineId"));
        linerow.setAttribute("ShipmentDate",
                             getPopulateValue(poprow, "ScheduleShipDate"));
        linerow.setAttribute("CountryChange",
                             getPopulateValue(poprow, "CountryChange"));
    } //end of populateLines


    /**
     * Container's getter for ShipmentDetilVo1.
     * @return ShipmentDetilVo1
     */
    public ShipmentDetilVoImpl getShipmentDetilVo1() {
        return (ShipmentDetilVoImpl)findViewObject("ShipmentDetilVo1");
    }

    public Row createLines() {

        ViewObject vo = getLineVOStyleDetail1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    }

    public String getPopulateValue(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }


    /**
     * Container's getter for FillChemicalPopUpVO1.
     * @return FillChemicalPopUpVO1
     */
    public FillChemicalPopUpVOImpl getFillChemicalPopUpVO1() {
        return (FillChemicalPopUpVOImpl)findViewObject("FillChemicalPopUpVO1");
    }


    /// Fill Operations Pop Up


    public void setPopUpWhereClauseOperations() {

        System.out.println("setPopUpWhereClauseOperations ------->");

        //        ViewObject vo = getLineVOStyleDetail1();
        //        String Stn = vo.getCurrentRow().getAttribute("ObsNo").toString();
        //
        //        System.out.println("ObsNo -------> " + Stn);
        //
        //        ViewObject popVo = getRecipeVersionVO1(); /// pop up view
        //        popVo.setWhereClause("STN_NO = '" + Stn + "'");
        //        //popVo.setWhereClause("STN_NO = '"+Stn+"'"+" AND ISSUE_DOC = '"+docNo+"'"  ); //this CUT_NO and ISSUE_DOC is the column alias of Pop uP
        //        popVo.executeQuery();


        getDBTransaction().commit();

        ViewObject vo = getHederVO1();
        String Style = null;
        String BuyerID = null;
        String Season = null;
        String Wash = null;
        String Color = null;
        String SystemId= null;
/*** ommited by airf to search by system id only
        try {
            Style = vo.getCurrentRow().getAttribute("Style").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            Style = null;
            e.printStackTrace();
        }

        try {
            BuyerID = vo.getCurrentRow().getAttribute("CustomerId").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            BuyerID = null;
            e.printStackTrace();
        }

        try {
            Season = vo.getCurrentRow().getAttribute("Season").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            Season = null;
            e.printStackTrace();
        }

        try {
            Wash = vo.getCurrentRow().getAttribute("Wash").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            Wash = null;
            e.printStackTrace();
        }

        try {
            Color = vo.getCurrentRow().getAttribute("Color").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            Color = null;
            e.printStackTrace();
        }***/
        try {
            SystemId = vo.getCurrentRow().getAttribute("SystemId").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            SystemId = null;
            e.printStackTrace();
        }
      

//        System.out.println("Parameters for Populate Operations are..............." +
//                           Style + Season + BuyerID + Wash + Color);
        System.out.println("Parameters for Populate Operations are..............." +
                         SystemId );
        ViewObject populatevo = getRecipeVersionVO1(); // Populate VO
        populatevo.setWhereClause(null);
      //  populatevo.setWhereClauseParam(0, BuyerID);
        populatevo.setWhereClauseParam(0, SystemId);
        /**** ommited by airf to search by system id only
        populatevo.setWhereClauseParam(0, BuyerID);
        populatevo.setWhereClauseParam(1, Style);
        populatevo.setWhereClauseParam(2, Season);
        populatevo.setWhereClauseParam(3, Wash);
        populatevo.setWhereClauseParam(4, Color);*/
        populatevo.executeQuery();
        populatevo.first();
        System.out.println("Query @ populate..............." +
                           populatevo.getQuery());


    }

    public void populateOperations() {

        ViewObject populatevo = getNewFillOperationPopUp1();

        System.out.println("setPopUpWhereClauseOperations ------->");

        //        ViewObject vo = getLineVOStyleDetail1();
        //        String Stn = vo.getCurrentRow().getAttribute("ObsNo").toString();
        //
        //        System.out.println("ObsNo -------> " + Stn);
        //
        //        ViewObject popVo = getRecipeVersionVO1(); /// pop up view
        //        popVo.setWhereClause("STN_NO = '" + Stn + "'");
        //        //popVo.setWhereClause("STN_NO = '"+Stn+"'"+" AND ISSUE_DOC = '"+docNo+"'"  ); //this CUT_NO and ISSUE_DOC is the column alias of Pop uP
        //        popVo.executeQuery();


        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        //          for (Row row : r) {
        //              System.out.println("Flag Check--->" + row.getAttribute("NewFlag"));
        //              if (row.getAttribute("NewFlag") != null &&
        //                  row.getAttribute("NewFlag").equals("Y")) {
        //                  System.out.println("Flag --->" + row.getAttribute("NewFlag"));
        //                  populateLinesOperations(row); /// method to populate dta
        //              }
        //          }

        for (Row row : r) {
            populateLinesOperations(row); /// method to populate dta
        }


        ViewObject ChemicalsBlock = getChemiRecipiDetailVO1(); // pop up view
        ChemicalsBlock.executeQuery();
    }
    ////////////////////////////

    public void populateLinesOperations(Row poprow) {


        Row linerow = createLinesOperations(); // Line Creation
        linerow.setAttribute("MinorOperations",
                             getPopulateValue(poprow, "MinorOperations"));
        linerow.setAttribute("MajorOperations",
                             getPopulateValue(poprow, "MajorOperations"));
        linerow.setAttribute("Smv", getPopulateValue(poprow, "Smv"));
        linerow.setAttribute("Target",
                             getPopulateValue(poprow, "Temperature"));
        linerow.setAttribute("Water", getPopulateValue(poprow, "Water"));
        linerow.setAttribute("Time", getPopulateValue(poprow, "MinTime"));
        linerow.setAttribute("Seq", getPopulateValue(poprow, "Seq"));
        linerow.setAttribute("WashType", getPopulateValue(poprow, "WashType"));
        //    getDBTransaction().commit();
        populateChemicals(getPopulateValue(poprow, "LineId"));
        populateSubProcess(getPopulateValue(poprow, "LineId"));

    } //end of populateLines

    public Row createLinesOperations() {

        ViewObject vo =
            getDetailRecipesVO1(); // in which you wants to populate daa
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public void populateChemicals(String LineId) {

        System.out.println("In Populate Item Details LineId  " + LineId);

        ViewObject vo = getFillChemicalPopUpVO1(); // map view read only
        vo.setWhereClause("LINE_ID ='" + LineId + "'");
        vo.executeQuery();

        RowSetIterator it = vo.createRowSetIterator("pp");


        while (it.hasNext()) {
            System.out.println("in chemical loop");
            Row linerow = createChemicals();
            Row Pop = it.next();
            linerow.setAttribute("SNo",
                                 getPopulateValue(Pop, "InventoryItemId"));
            linerow.setAttribute("PerBatchConsumption",
                                 getPopulateValue(Pop, "PerBatchCons"));
            linerow.setAttribute("PerBatchQuantity",
                                 getPopulateValue(Pop, "PerBatchQty"));
            linerow.setAttribute("ItemCode", getPopulateValue(Pop, "Code"));
            linerow.setAttribute("OnHandQty",
                                 getPopulateValue(Pop, "OnHandQty"));
            linerow.setAttribute("TotalConsumption",
                                 getPopulateValue(Pop, "TotalCons"));
            linerow.setAttribute("ItemDescription",
                                 getPopulateValue(Pop, "ItemDesc"));


        }


        it.closeRowSetIterator();
        System.out.println("Out Populate Item Details");
    }


    public Row createChemicals() {

        System.out.println("In Create Item");

        ViewObject vo = getChemiRecipiDetailVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;


    }


    public void populateSubProcess(String LineId) {

        System.out.println("In SubProcess LineId  " + LineId);

        ViewObject vo = this.getAssignedSubProcessPopUpVO1();// map view read only
        vo.setWhereClause("LINE_ID ='" + LineId + "'");
        vo.executeQuery();

        RowSetIterator it = vo.createRowSetIterator("gg");


        while (it.hasNext()) {
            System.out.println("in createSubProcess loop");
            Row linerow = createSubProcess();
            Row Pop = it.next();
            linerow.setAttribute("SubProcess",
                                 getPopulateValue(Pop, "SubProcess"));

        }


        it.closeRowSetIterator();
        System.out.println("Out Populate Item Details");
    }


    public Row createSubProcess() {

        System.out.println("In createSubProcess Item");

        ViewObject vo = getSubProcessVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;

    }


    // Stn Pop Up

    public void populateBundlesStn() {


        ViewObject populatevo = getStnLovNewVO1(); // pop up view
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {
            System.out.println("SelectStn Check--->" +
                               row.getAttribute("SelectStn"));
            if (row.getAttribute("SelectStn") != null &&
                row.getAttribute("SelectStn").equals("Y")) {
                System.out.println("Flag --->" +
                                   row.getAttribute("SelectStn"));
                populateLinesTestStn(row); /// method to populate dta
            }
        }
    }
    ////////////////////////////

    public void populateLinesTestStn(Row poprow) {
        System.out.println("populateLinesTest ------->");


        Row linerow = createLinesStn(); // Line Creation
        linerow.setAttribute("ObsNo", getPopulateValue(poprow, "StnNo"));
        linerow.setAttribute("TemCode",
                             getPopulateValue(poprow, "OrderedItem"));
        linerow.setAttribute("Description",
                             getPopulateValue(poprow, "UserItemDescription"));
        linerow.setAttribute("Quantity",
                             getPopulateValue(poprow, "OrderedQuantity"));
        linerow.setAttribute("ItemId",
                             getPopulateValue(poprow, "OrderedItemId"));


    } //end of populateLines

    public Row createLinesStn() {

        ViewObject vo =
            getLineVOStyleDetail1(); // in which you wants to populate daa
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader


    // End Stn Pop Up


    /**
     * Container's getter for RecipeVersionVO1.
     * @return RecipeVersionVO1
     */
    public RecipeVersionVOImpl getRecipeVersionVO1() {
        return (RecipeVersionVOImpl)findViewObject("RecipeVersionVO1");
    }

    /**
     * Container's getter for NewFillOperationPopUp1.
     * @return NewFillOperationPopUp1
     */
    public NewFillOperationPopUpImpl getNewFillOperationPopUp1() {
        return (NewFillOperationPopUpImpl)findViewObject("NewFillOperationPopUp1");
    }

    /**
     * Container's getter for ReceipeVarsionOperationLink1.
     * @return ReceipeVarsionOperationLink1
     */
    public ViewLinkImpl getReceipeVarsionOperationLink1() {
        return (ViewLinkImpl)findViewLink("ReceipeVarsionOperationLink1");
    }


    /**
     * Container's getter for StnLovNewVO1.
     * @return StnLovNewVO1
     */
    public ViewObjectImpl getStnLovNewVO1() {
        return (ViewObjectImpl)findViewObject("StnLovNewVO1");
    }

    /**
     * Container's getter for Header_STN_VL1.
     * @return Header_STN_VL1
     */
    public ViewLinkImpl getHeader_STN_VL1() {
        return (ViewLinkImpl)findViewLink("Header_STN_VL1");
    }

    // Version Creation


    public int VersionCreation() {

        int value = 0;

        ViewObject vo = getHederVO1();
        String HeaderId =
            vo.getCurrentRow().getAttribute("GwpGeId").toString();
        //        String HeaderId = Integer.parseInt(vo.getCurrentRow().getAttribute("Name").toString()) ;

        System.out.println("HeaderId    " + HeaderId);

        String stmt =
            "BEGIN :1 := MNJ_WASHING_OPERATION_PLAN.VERSION_CREATION(:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        int a = 0;
        try {
            cs.setString(2, HeaderId);
            cs.registerOutParameter(1, OracleTypes.INTEGER);
            cs.execute();
            value = cs.getInt(1);
            cs.close();
        } catch (Exception e) {
            //status = e.getMessage();
            ;
        }
        vo.executeQuery();
        //        System.out.println("Pass Fail value --------->>" + value);
        return value;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt,
                                        Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st =
 getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    ;
                }
            }
        }

    }

    public String createJob(int HeaderId) {

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");

        String status = null;
       
//        status =
//                (String)callStoredFunction(VARCHAR2, "MNJ_WASHING_INTEGRATION_TO_ERP.CREATE_JOB(?, ?, ?, ?, ?)",
//                                           new Object[] { HeaderId, orgId,
//                                                          respId, user,
//                                                          respAppl });
//        
         /** create job function changed for restructring 3-3-2021**/
        
         status =
                         (String)callStoredFunction(VARCHAR2, "MNJ_WASHING_INTEGRATION_TO_ERP.xx_wip_create_job(?, ?, ?, ?, ?)",
                                                    new Object[] { HeaderId, orgId,
                                                                   respId, user,
                                                                   respAppl });
        return status;
    }

    public String createMaterial(int HeaderId) {

        String status = null;

        return status;
    }


    public String callCreateRouting(int inventoryID, int HeaderId) {

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");


        String status = null;
//        String stmt =
//            "BEGIN  MNJ_WASHING_INTEGRATION_TO_ERP.MNJ_AUTO_CREATE_ROUTING(:1,:2 ,:3, :4, :5, :6, :7); end;";
        
        /**new procedure added for restructring  3/3/2021**/
        String stmt =
            "BEGIN  MNJ_WASHING_INTEGRATION_TO_ERP.xx_mnj_auto_create_routing(:1,:2 ,:3, :4, :5, :6, :7); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {

            cs.setString(1, orgId); //org ID
            cs.setString(2, respId); //responsibility ID
            cs.setString(3, user); //user ID
            cs.setString(4, respAppl); //application ID
            cs.setInt(5, inventoryID); //item ID
            cs.setInt(6, HeaderId); //Header ID
            cs.registerOutParameter(7,
                                    oracle.jdbc.OracleTypes.VARCHAR); //status

            cs.execute();
            status = cs.getString(7);
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }

    public void Balance_Calc() {

        String LineId = null;
        Double Quantity = 0.0;
        int count = 0;
        Double Balance_loop = 0.0;
        Double RunningBalance = 0.0;
        double balance;
        getDBTransaction().commit();

        System.out.println("In Balance_Calc method.... ");

        ViewObject lvo = this.getLineVOStyleDetail1();
        RowSetIterator lvoit = lvo.createRowSetIterator("lvoit");
        outer:
        while (lvoit.hasNext()) {
            Row linesNext = lvoit.next();

            count = lvoit.getCurrentRowIndex();

            System.out.println("Row count is..." + count);

            try {
                LineId = linesNext.getAttribute("GwpGeObid").toString();
                System.out.println("Line Id is..." + LineId);
            } catch (Exception e) {
                ;
            }

            try {
                Quantity =
                        Double.parseDouble(linesNext.getAttribute("OrderedQuantity").toString());
                System.out.println("Quantity Value is... " + Quantity);
            } catch (Exception ee) {
                Quantity = 0.0;
                System.out.println("Exception Quantity");
            }

            if (count == 0) {
                System.out.println("In if condition of 1st Row");
                RunningBalance = BalanceCalc_FirstRow();
            }

            else if (count >= 0) {
                System.out.println("In else condition of other than 1st Row");

                int i = 0;
                for (i = count - 1; i >= 0; i--) {
                    // i = 0 ; true
                    System.out.println("At row no :... " + i);
                    this.getDBTransaction().commit();

                    Row rowloop = lvoit.getRowAtRangeIndex(i); // previous row

                    System.out.println("Row loop is... " + rowloop);
                    try {
                        Balance_loop =
                                Double.parseDouble(rowloop.getAttribute("BalanceQty").toString());
                    } catch (Exception e) {
                        Balance_loop = RunningBalance;
                    }
                    RunningBalance = Balance_loop - Quantity;

                    linesNext.setAttribute("BalanceQty", RunningBalance);


                    if (RunningBalance <= 0.0) {
                        //break;
                        linesNext.setAttribute("BalanceQty", RunningBalance);
                        break outer;
                    }

                    break;
                }
            }

        }
        lvoit.closeRowSetIterator();
        System.out.println("Save.....");

        this.getDBTransaction().commit();


    }

    public double BalanceCalc_FirstRow() {
        getDBTransaction().commit();

        Double Quantity = 0.0;
        Double Balance = 0.0;
        Double TotalProduction_Qty = 0.0;

        System.out.println("1st Row method...");

        ViewObject voh = getHederVO1();
        String HeaderId =
            voh.getCurrentRow().getAttribute("GwpGeId").toString();

        System.out.println("HeaderId    " + HeaderId);

        ViewObject populatevo = getTotal_Production_VO1(); // Populate VO
        populatevo.setWhereClause(null);
        populatevo.setWhereClauseParam(0, HeaderId);
        populatevo.executeQuery();
        populatevo.first();
        System.out.println("Query @ populate..............." +
                           populatevo.getQuery());

        try {
            TotalProduction_Qty =
                    Double.parseDouble(populatevo.getCurrentRow().getAttribute("Production").toString());

            System.out.println("Total Production Qty is... " +
                               TotalProduction_Qty);
        } catch (Exception ee) {
            // TODO: Add catch code
            TotalProduction_Qty = 0.0;
        }

        try {
            ViewObject vo = getLineVOStyleDetail1();
            vo.first();

            try {
                Quantity =
                        Double.parseDouble(vo.getCurrentRow().getAttribute("OrderedQuantity").toString());
                System.out.println("Quantity at first row is.. " + Quantity);
            } catch (Exception ee) {
                // TODO: Add catch code
                Quantity = 0.0;
            }

            Balance = TotalProduction_Qty - Quantity;

            vo.getCurrentRow().setAttribute("BalanceQty", Balance);
            System.out.println("Balance at First Row is.. " + Balance);

            getDBTransaction().commit();
            return Balance;
        } catch (NullPointerException e) {
            return 0.0;
        }

    }

    public String CallPost(int HeaderId) {

        Balance_Calc();

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");

        String status = null;
        status =
                (String)callStoredFunction(VARCHAR2, "MNJ_WASHING_INTEGRATION_TO_ERP.CALL_POST(?, ?, ?, ?, ?)",
                                           new Object[] { HeaderId, orgId,
                                                          respId, respAppl,
                                                          user });

        return status;
    }


    public String CallCompletion(int HeaderId) {
        System.out.println("In completion...");
        String GwpGeObid = null;
        ViewObject vo = getLineVOStyleDetail1();
        LineVOStyleDetailRowImpl HeaderRow =
            (LineVOStyleDetailRowImpl)vo.getCurrentRow();

        try {
            GwpGeObid = HeaderRow.getGwpGeObid().toString();
        } catch (Exception e) {
            // TODO: Add catch code
            GwpGeObid = null;
            e.printStackTrace();
        }

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");

        System.out.println("Parameters are..." + HeaderId +
                           "Parameters are..." + GwpGeObid +
                           "Parameters are..." + orgId + "Parameters are..." +
                           user);

        String status = null;

        status =
                (String)callStoredFunction(VARCHAR2, "MNJ_WASHING_INTEGRATION_TO_ERP.SUBMIT_REQUEST_COMPLETION(?, ?,?, ?, ?)",
                                           new Object[] { HeaderId, orgId,
                                                          respId, respAppl,
                                                          user });

        //        status =
        //                (String)callStoredFunction(VARCHAR2, "MNJ_WASHING_INTEGRATION_TO_ERP.SUBMIT_REQUEST_COMPLETION(?, ?, ?)",
        //                                           new Object[] { HeaderId, GwpGeObid,
        //                                                          orgId, user });
        //                status =
        //                        (String)callStoredFunction(VARCHAR2, "MNJ_WASHING_INTEGRATION_TO_ERP.SUBMIT_REQUEST_COMPLETION(?, ?, ?, ?, ?)",
        //                                                   new Object[] { HeaderId, GwpGeObid,
        //                                                                  orgId, respId,
        //                                                                  respAppl, user });

        return status;
    }


    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {


        if (userId != null) {

            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            userSession.setAttribute("userId", userId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respId", respId);
            userSession.setAttribute("respAppl", respAppl);
            userSession.setAttribute("unitName", getUnitName(orgId));

        }
    }


    public String getUnitName(String orgId) {

        ViewObject vo = getoperatingUnitsVo1();
        vo.setWhereClause("ORGANIZATION_ID = " + orgId);
        vo.executeQuery();
        String name = null;
        vo.first();

        try {
            name = vo.getCurrentRow().getAttribute("Name").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return name;

    }

    public String callBOM(int inventoryID, int HeaderID) {


        System.out.println("In BOM method...");
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");


        String status = null;
        String stmt =
            "BEGIN  MNJ_WASHING_INTEGRATION_TO_ERP.XX_MNJ_CALL_PROCESS_MULTI_BOM(:1,:2 ,:3, :4, :5, :6, :7); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {

            cs.setString(1, orgId); //org ID
            cs.setString(2, respId); //responsibility ID
            cs.setString(3, user); //user ID
            cs.setString(4, respAppl); //application ID
            cs.setInt(5, inventoryID); //item ID
            cs.registerOutParameter(6,
                                    oracle.jdbc.OracleTypes.VARCHAR); //status
            cs.setInt(7, HeaderID); //hdr ID

            cs.execute();
            status = cs.getString(6);
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }


    public String CreateMaterial(String inventoryID, String HeaderID) {

        System.out.println("In method of create material...........");

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");


        String status = null;
        String stmt =
            "BEGIN  MNJ_WASHING_INTEGRATION_TO_ERP.MNJ_CALL_PROCESS_MULTI_BOM(:1,:2 ,:3, :4, :5, :6, :7); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {

            cs.setString(1, orgId); //org ID
            cs.setString(2, respId); //responsibility ID
            cs.setString(3, user); //user ID
            cs.setString(4, respAppl); //application ID
            cs.setString(5, inventoryID); //item ID
            cs.registerOutParameter(6,
                                    oracle.jdbc.OracleTypes.VARCHAR); //status
            cs.setString(7, HeaderID); //hdr ID

            cs.execute();
            status = cs.getString(6);
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }


    public String CreateRequisition() {

        ViewObject vo = getHederVO1();
        String HeaderId =
            vo.getCurrentRow().getAttribute("GwpGeId").toString();
        System.out.println("Header Id -->" + HeaderId);

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String UserId = (String)sessionScope.get("userId");
        String RespId = (String)sessionScope.get("respId");

        System.out.println("HeaderId......" + HeaderId);
        System.out.println("UserId........" + UserId);
        System.out.println("RespId........" + RespId);

        String RequestStatus = null;
        RequestStatus =
                (String)callStoredFunction(OracleTypes.VARCHAR, "MNJ_WASHING_INTEGRATION_TO_ERP.MNJ_CREATE_WI_REQUISITION(?, ?, ?)",
                                           new Object[] { HeaderId, UserId,
                                                          RespId });


        System.out.println(HeaderId + "status--->" + RequestStatus);

        return RequestStatus;

    }


    public void Populate() {
        getDBTransaction().commit();

        int b;
        ViewObject vo = getHederVO1();
     /*   String Style = null;
        String BuyerID = null;
        String Season = null;
        String Wash = null;
        String Color = null;

        try {
            Style = vo.getCurrentRow().getAttribute("Style").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            Style = null;
            e.printStackTrace();
        }

        try {
            BuyerID = vo.getCurrentRow().getAttribute("CustomerId").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            BuyerID = null;
            e.printStackTrace();
        }

        try {
            Season = vo.getCurrentRow().getAttribute("Season").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            Season = null;
            e.printStackTrace();
        }

        try {
            Wash = vo.getCurrentRow().getAttribute("Wash").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            Wash = null;
            e.printStackTrace();
        }

        try {
            Color = vo.getCurrentRow().getAttribute("Color").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            Color = null;
            e.printStackTrace();
        }
*/      String systemid= null;
        try {
            systemid = vo.getCurrentRow().getAttribute("SystemId").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            systemid = null;
            e.printStackTrace();
        }

        System.out.println("Parameters for Populate BPO are..............." +
                           systemid);
        ViewObject populatevo = getFillbpo1_1(); // Populate VO
        populatevo.setWhereClause(null);
        populatevo.setWhereClauseParam(0, systemid);
        
        
       /* populatevo.setWhereClauseParam(0, Style);
        populatevo.setWhereClauseParam(1, Season);
        populatevo.setWhereClauseParam(2, BuyerID);
        populatevo.setWhereClauseParam(3, Color);
        populatevo.setWhereClauseParam(4, Wash);*/
        populatevo.executeQuery();
        populatevo.first();
        System.out.println("Query @ populate..............." +
                           populatevo.getQuery());

        int cntRec = populatevo.getRowCount();
        populatevo.first();
        ViewObject vo_Line = getLineVOStyleDetail1(); // Lines VO
        if (cntRec != 0) {
            for (b = 1; b <= cntRec; b++) {


                Row r = vo_Line.createRow();
                vo_Line.last();
                vo_Line.next();
                vo_Line.insertRow(r);
                r.setNewRowState(Row.STATUS_INITIALIZED);

                // ----------------------------------------- Receiving Tab Data -------------------------------------- //
                r.setAttribute("BpoId",
                               populatevo.getCurrentRow().getAttribute("BpoId"));
                r.setAttribute("ObsNo",
                               populatevo.getCurrentRow().getAttribute("Bpo"));
                r.setAttribute("TemCode",
                               populatevo.getCurrentRow().getAttribute("ItemCode"));
                r.setAttribute("Description",
                               populatevo.getCurrentRow().getAttribute("ItemDescription"));
                r.setAttribute("ItemId",
                               populatevo.getCurrentRow().getAttribute("ItemId"));
                r.setAttribute("Quantity",
                               populatevo.getCurrentRow().getAttribute("Quantity"));
                r.setAttribute("CurrentPlanQty",
                               populatevo.getCurrentRow().getAttribute("CurrentPlanQty"));
                //                r.setAttribute("ShipmentDate",
                //                               populatevo.getCurrentRow().getAttribute("DeliveryDate"));
                getDBTransaction().commit();
                populatevo.next();
            }
        }

        getDBTransaction().commit();
        vo_Line.executeQuery();


    } //populate Lines


    public void checkduplication(String HeaderId, String BuyerId, String Style,
                                 String Season, String Wash, String Color) {
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String orgId =(String)sessionScope.get("orgId");

        System.out.println("Parameters for duplication are ... " + HeaderId +
                           BuyerId + Style + Season + Wash + Color + orgId);
        ViewObject voFmn1 =
            createViewObjectFromQueryStmt("voFmnl1", "select count(*) from MNJ_GWP_MFG_GEVALUATION h\n" +
                "where h.customer_id = '" + BuyerId + "' and h.org_id = '" +
                orgId + "'\n" +
                "and h.style = '" + Style + "' and h.season = '" + Season +
                "'\n" +
                "and h.wash = '" + Wash + "' and h.color = '" + Color +
                "' and h.GWP_GE_ID != '" + HeaderId + "'");
        voFmn1.executeQuery();
        voFmn1.first();
        System.out.println("Query is.... ---> " + voFmn1.getQuery());
        if (Integer.parseInt(voFmn1.getCurrentRow().getAttribute(0).toString()) >=
            1)

        {
            FacesContext context = FacesContext.getCurrentInstance();
            FacesMessage message =
                new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                 "Duplicate Record Found...", "");
            context.addMessage(null, message);
            voFmn1.remove();
        }

        else {
            getDBTransaction().commit();
            FacesContext context = FacesContext.getCurrentInstance();
            FacesMessage message = new FacesMessage("Record Saved...");
            context.addMessage(null, message);
            voFmn1.remove();
        }

        voFmn1.remove();

    }


    public void Delete_Header() {
        ViewObject vo = getHederVO1();
        String HeaderId =
            vo.getCurrentRow().getAttribute("GwpGeId").toString();
        System.out.println("OP Header Id is ......" + HeaderId);
        Integer PHeaderId = Integer.parseInt(HeaderId);
        CallableStatement plSqlBlock = null;
        String Statement =
            "BEGIN DELETE FROM MNJ_GWP_MFG_GEVALUATION WHERE GWP_GE_ID = " +
            PHeaderId + ";" + "COMMIT; END;";
        plSqlBlock = getDBTransaction().createCallableStatement(Statement, 0);
        try {
            plSqlBlock.execute();
            vo.executeQuery();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void DeleteStyleDetail() {

        getDBTransaction().commit();

        String Style = null;
        String Season = null;
        String Buyer = null;
        String Wash = null;
        String Color = null;
       String SystemId=null;
        String HeaderId = null;
        System.out.println("In method DeleteStyleDetail.....");
        ViewObject voh = getHederVO1();

        try {

            try {
                Style = voh.getCurrentRow().getAttribute("Style").toString();
            } catch (Exception e) {
                // TODO: Add catch code
                Style = null;
                e.printStackTrace();
            }

            try {
                Season = voh.getCurrentRow().getAttribute("Season").toString();
            } catch (Exception e) {
                // TODO: Add catch code
                Season = null;
                e.printStackTrace();
            }

            try {
                Buyer =
                        voh.getCurrentRow().getAttribute("CustomerId").toString();
            } catch (Exception e) {
                // TODO: Add catch code
                Buyer = null;
                e.printStackTrace();
            }

            try {
                Wash = voh.getCurrentRow().getAttribute("Wash").toString();
            } catch (Exception e) {
                // TODO: Add catch code
                Wash = null;
                e.printStackTrace();
            }

            try {
                Color = voh.getCurrentRow().getAttribute("Color").toString();
            } catch (Exception e) {
                // TODO: Add catch code
                Color = null;
                e.printStackTrace();
            }

            System.out.println("Parameters are.... " + Style + Season + Buyer +
                               Wash + Color);

            ViewObject vo = getLineVOStyleDetail1();
            LineVOStyleDetailRowImpl HeaderRow =
                (LineVOStyleDetailRowImpl)vo.getCurrentRow();

            try {
                HeaderId = HeaderRow.getGwpGeObid().toString();
            } catch (Exception e) {
                // TODO: Add catch code
                HeaderId = null;
                e.printStackTrace();
            }

            if (CheckStyleDetail(Buyer, Style, Season, Wash, Color) == 1) {
                FacesContext context = FacesContext.getCurrentInstance();
                FacesMessage message =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Can not delete record as data exist on prior forms....",
                                     "");
                context.addMessage(null, message);
            } else {
                System.out.println("Header Id is ......" + HeaderId);
                Integer PHeaderId = Integer.parseInt(HeaderId);
                CallableStatement plSqlBlock = null;
                String Statement =
                    "BEGIN DELETE FROM MNJ_GWP_MFG_GE_OBSLINE WHERE GWP_GE_OBID = " +
                    PHeaderId + ";" + "COMMIT; END;";
                plSqlBlock =
                        getDBTransaction().createCallableStatement(Statement,
                                                                   0);
                try {
                    plSqlBlock.execute();
                    vo.executeQuery();

                } catch (SQLException e) {
                    e.printStackTrace();
                }
                FacesContext context = FacesContext.getCurrentInstance();
                FacesMessage message = new FacesMessage("Record Deleted...");
                context.addMessage(null, message);
            }
        } catch (Exception e) {
            // TODO: Add catch code

            e.printStackTrace();
        }
        getDBTransaction().commit();

    }

    public int CheckStyleDetail(String BuyerId, String Style, String Season,
                                String Wash, String Color) {

        Map sessionScope = ADFContext.getCurrent().getSessionScope();

        String orgId = (String)sessionScope.get("orgId");
        System.out.println("Org ID is...." + orgId);

        int count = 0;
        count =
                (Integer)callStoredFunction(INTEGER, "mnj_washing_delete_validation.check_production_data(?, ?, ?, ?, ?, ?)",
                                            new Object[] { Integer.parseInt(orgId),
                                                           BuyerId, Style,
                                                           Season, Wash,
                                                           Color });

        return count;
    }


    /**
     * Container's getter for operatingUnitsVo1.
     * @return operatingUnitsVo1
     */
    public ViewObjectImpl getoperatingUnitsVo1() {
        return (ViewObjectImpl)findViewObject("operatingUnitsVo1");
    }

    /**
     * Container's getter for Pop_VO1.
     * @return Pop_VO1
     */
    public ViewObjectImpl getPop_VO1() {
        return (ViewObjectImpl)findViewObject("Pop_VO1");
    }

    /**
     * Container's getter for DetailRecipesVO1.
     * @return DetailRecipesVO1
     */
    public ViewObjectImpl getDetailRecipesVO1() {
        return (ViewObjectImpl)findViewObject("DetailRecipesVO1");
    }

    /**
     * Container's getter for MnjRoutingPlanDetFkLink1.
     * @return MnjRoutingPlanDetFkLink1
     */
    public ViewLinkImpl getMnjRoutingPlanDetFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjRoutingPlanDetFkLink1");
    }

    /**
     * Container's getter for ChemiRecipiDetailVO1.
     * @return ChemiRecipiDetailVO1
     */
    public ViewObjectImpl getChemiRecipiDetailVO1() {
        return (ViewObjectImpl)findViewObject("ChemiRecipiDetailVO1");
    }

    /**
     * Container's getter for MnjMfgChemicalDetFkLink1.
     * @return MnjMfgChemicalDetFkLink1
     */
    public ViewLinkImpl getMnjMfgChemicalDetFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgChemicalDetFkLink1");
    }

    /**
     * Container's getter for SubProcessVO1.
     * @return SubProcessVO1
     */
    public ViewObjectImpl getSubProcessVO1() {
        return (ViewObjectImpl)findViewObject("SubProcessVO1");
    }

    /**
     * Container's getter for MnjMfgSubproDetFkLink1.
     * @return MnjMfgSubproDetFkLink1
     */
    public ViewLinkImpl getMnjMfgSubproDetFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgSubproDetFkLink1");
    }

    /**
     * Container's getter for Total_Production_VO1.
     * @return Total_Production_VO1
     */
    public ViewObjectImpl getTotal_Production_VO1() {
        return (ViewObjectImpl)findViewObject("Total_Production_VO1");
    }

    /**
     * Container's getter for WashCatagoryVO1.
     * @return WashCatagoryVO1
     */
    public ViewObjectImpl getWashCatagoryVO1() {
        return (ViewObjectImpl)findViewObject("WashCatagoryVO1");
    }

    /**
     * Container's getter for SubProcessPopUpVO1.
     * @return SubProcessPopUpVO1
     */
    public SubProcessPopUpVOImpl getSubProcessPopUpVO1() {
        return (SubProcessPopUpVOImpl)findViewObject("SubProcessPopUpVO1");
    }

    /**
     * Container's getter for DetailRecipesVO_VS_SubProcessPopUpVO_VL1.
     * @return DetailRecipesVO_VS_SubProcessPopUpVO_VL1
     */
    public ViewLinkImpl getDetailRecipesVO_VS_SubProcessPopUpVO_VL1() {
        return (ViewLinkImpl)findViewLink("DetailRecipesVO_VS_SubProcessPopUpVO_VL1");
    }

    /**
     * Container's getter for AssignedSubProcessPopUpVO1.
     * @return AssignedSubProcessPopUpVO1
     */
    public ViewObjectImpl getAssignedSubProcessPopUpVO1() {
        return (ViewObjectImpl)findViewObject("AssignedSubProcessPopUpVO1");
    }

    /**
     * Container's getter for Fillbpo1_1.
     * @return Fillbpo1_1
     */
    public ViewObjectImpl getFillbpo1_1() {
        return (ViewObjectImpl)findViewObject("Fillbpo1_1");
    }
}
