package mnj.mfg.model.lov.views;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 03 12:17:36 BDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FillOperationsPopUpVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        HeaderId {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getHeaderId();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setHeaderId((Number)value);
            }
        }
        ,
        LineId {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getLineId();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setLineId((Number)value);
            }
        }
        ,
        DocNumber {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getDocNumber();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setDocNumber((Number)value);
            }
        }
        ,
        StnNo {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getStnNo();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setStnNo((String)value);
            }
        }
        ,
        MinorOperations {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getMinorOperations();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setMinorOperations((String)value);
            }
        }
        ,
        MajorOperations {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getMajorOperations();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setMajorOperations((String)value);
            }
        }
        ,
        Smv {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getSmv();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setSmv((Number)value);
            }
        }
        ,
        Temperature {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getTemperature();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setTemperature((String)value);
            }
        }
        ,
        Water {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getWater();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setWater((String)value);
            }
        }
        ,
        MinTime {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getMinTime();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setMinTime((Number)value);
            }
        }
        ,
        Seq {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getSeq();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setSeq((Number)value);
            }
        }
        ,
        Flag {
            public Object get(FillOperationsPopUpVORowImpl obj) {
                return obj.getFlag();
            }

            public void put(FillOperationsPopUpVORowImpl obj, Object value) {
                obj.setFlag((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(FillOperationsPopUpVORowImpl object);

        public abstract void put(FillOperationsPopUpVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int HEADERID = AttributesEnum.HeaderId.index();
    public static final int LINEID = AttributesEnum.LineId.index();
    public static final int DOCNUMBER = AttributesEnum.DocNumber.index();
    public static final int STNNO = AttributesEnum.StnNo.index();
    public static final int MINOROPERATIONS = AttributesEnum.MinorOperations.index();
    public static final int MAJOROPERATIONS = AttributesEnum.MajorOperations.index();
    public static final int SMV = AttributesEnum.Smv.index();
    public static final int TEMPERATURE = AttributesEnum.Temperature.index();
    public static final int WATER = AttributesEnum.Water.index();
    public static final int MINTIME = AttributesEnum.MinTime.index();
    public static final int SEQ = AttributesEnum.Seq.index();
    public static final int FLAG = AttributesEnum.Flag.index();

    /**
     * This is the default constructor (do not remove).
     */
    public FillOperationsPopUpVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute HeaderId.
     * @return the HeaderId
     */
    public Number getHeaderId() {
        return (Number) getAttributeInternal(HEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HeaderId.
     * @param value value to set the  HeaderId
     */
    public void setHeaderId(Number value) {
        setAttributeInternal(HEADERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LineId.
     * @return the LineId
     */
    public Number getLineId() {
        return (Number) getAttributeInternal(LINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LineId.
     * @param value value to set the  LineId
     */
    public void setLineId(Number value) {
        setAttributeInternal(LINEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocNumber.
     * @return the DocNumber
     */
    public Number getDocNumber() {
        return (Number) getAttributeInternal(DOCNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocNumber.
     * @param value value to set the  DocNumber
     */
    public void setDocNumber(Number value) {
        setAttributeInternal(DOCNUMBER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute StnNo.
     * @return the StnNo
     */
    public String getStnNo() {
        return (String) getAttributeInternal(STNNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute StnNo.
     * @param value value to set the  StnNo
     */
    public void setStnNo(String value) {
        setAttributeInternal(STNNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MinorOperations.
     * @return the MinorOperations
     */
    public String getMinorOperations() {
        return (String) getAttributeInternal(MINOROPERATIONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MinorOperations.
     * @param value value to set the  MinorOperations
     */
    public void setMinorOperations(String value) {
        setAttributeInternal(MINOROPERATIONS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MajorOperations.
     * @return the MajorOperations
     */
    public String getMajorOperations() {
        return (String) getAttributeInternal(MAJOROPERATIONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MajorOperations.
     * @param value value to set the  MajorOperations
     */
    public void setMajorOperations(String value) {
        setAttributeInternal(MAJOROPERATIONS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Smv.
     * @return the Smv
     */
    public Number getSmv() {
        return (Number) getAttributeInternal(SMV);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Smv.
     * @param value value to set the  Smv
     */
    public void setSmv(Number value) {
        setAttributeInternal(SMV, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Temperature.
     * @return the Temperature
     */
    public String getTemperature() {
        return (String) getAttributeInternal(TEMPERATURE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Temperature.
     * @param value value to set the  Temperature
     */
    public void setTemperature(String value) {
        setAttributeInternal(TEMPERATURE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Water.
     * @return the Water
     */
    public String getWater() {
        return (String) getAttributeInternal(WATER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Water.
     * @param value value to set the  Water
     */
    public void setWater(String value) {
        setAttributeInternal(WATER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MinTime.
     * @return the MinTime
     */
    public Number getMinTime() {
        return (Number) getAttributeInternal(MINTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MinTime.
     * @param value value to set the  MinTime
     */
    public void setMinTime(Number value) {
        setAttributeInternal(MINTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Seq.
     * @return the Seq
     */
    public Number getSeq() {
        return (Number) getAttributeInternal(SEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Seq.
     * @param value value to set the  Seq
     */
    public void setSeq(Number value) {
        setAttributeInternal(SEQ, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Flag.
     * @return the Flag
     */
    public String getFlag() {
        return (String) getAttributeInternal(FLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Flag.
     * @param value value to set the  Flag
     */
    public void setFlag(String value) {
        setAttributeInternal(FLAG, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
