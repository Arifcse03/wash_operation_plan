package mnj.mfg.model.lov.views;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 03 12:21:02 BDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FillChemicalPopUpVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        LineId {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getLineId();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setLineId((Number)value);
            }
        }
        ,
        Code {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getCode();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setCode((String)value);
            }
        }
        ,
        InventoryItemId {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getInventoryItemId();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setInventoryItemId((Number)value);
            }
        }
        ,
        Uom {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getUom();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setUom((String)value);
            }
        }
        ,
        PerBatchCons {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getPerBatchCons();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setPerBatchCons((Number)value);
            }
        }
        ,
        PerBatchQty {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getPerBatchQty();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setPerBatchQty((Number)value);
            }
        }
        ,
        OnHandQty {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getOnHandQty();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setOnHandQty((Number)value);
            }
        }
        ,
        TotalCons {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getTotalCons();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setTotalCons((Number)value);
            }
        }
        ,
        ItemDesc {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getItemDesc();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setItemDesc((String)value);
            }
        }
        ,
        PerBatchQuantity {
            public Object get(FillChemicalPopUpVORowImpl obj) {
                return obj.getPerBatchQuantity();
            }

            public void put(FillChemicalPopUpVORowImpl obj, Object value) {
                obj.setPerBatchQuantity((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(FillChemicalPopUpVORowImpl object);

        public abstract void put(FillChemicalPopUpVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LINEID = AttributesEnum.LineId.index();
    public static final int CODE = AttributesEnum.Code.index();
    public static final int INVENTORYITEMID = AttributesEnum.InventoryItemId.index();
    public static final int UOM = AttributesEnum.Uom.index();
    public static final int PERBATCHCONS = AttributesEnum.PerBatchCons.index();
    public static final int PERBATCHQTY = AttributesEnum.PerBatchQty.index();
    public static final int ONHANDQTY = AttributesEnum.OnHandQty.index();
    public static final int TOTALCONS = AttributesEnum.TotalCons.index();
    public static final int ITEMDESC = AttributesEnum.ItemDesc.index();
    public static final int PERBATCHQUANTITY = AttributesEnum.PerBatchQuantity.index();

    /**
     * This is the default constructor (do not remove).
     */
    public FillChemicalPopUpVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute LineId.
     * @return the LineId
     */
    public Number getLineId() {
        return (Number) getAttributeInternal(LINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LineId.
     * @param value value to set the  LineId
     */
    public void setLineId(Number value) {
        setAttributeInternal(LINEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Code.
     * @return the Code
     */
    public String getCode() {
        return (String) getAttributeInternal(CODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Code.
     * @param value value to set the  Code
     */
    public void setCode(String value) {
        setAttributeInternal(CODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute InventoryItemId.
     * @return the InventoryItemId
     */
    public Number getInventoryItemId() {
        return (Number) getAttributeInternal(INVENTORYITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute InventoryItemId.
     * @param value value to set the  InventoryItemId
     */
    public void setInventoryItemId(Number value) {
        setAttributeInternal(INVENTORYITEMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Uom.
     * @return the Uom
     */
    public String getUom() {
        return (String) getAttributeInternal(UOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Uom.
     * @param value value to set the  Uom
     */
    public void setUom(String value) {
        setAttributeInternal(UOM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PerBatchCons.
     * @return the PerBatchCons
     */
    public Number getPerBatchCons() {
        return (Number) getAttributeInternal(PERBATCHCONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PerBatchCons.
     * @param value value to set the  PerBatchCons
     */
    public void setPerBatchCons(Number value) {
        setAttributeInternal(PERBATCHCONS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PerBatchQty.
     * @return the PerBatchQty
     */
    public Number getPerBatchQty() {
        return (Number) getAttributeInternal(PERBATCHQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PerBatchQty.
     * @param value value to set the  PerBatchQty
     */
    public void setPerBatchQty(Number value) {
        setAttributeInternal(PERBATCHQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OnHandQty.
     * @return the OnHandQty
     */
    public Number getOnHandQty() {
        return (Number) getAttributeInternal(ONHANDQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OnHandQty.
     * @param value value to set the  OnHandQty
     */
    public void setOnHandQty(Number value) {
        setAttributeInternal(ONHANDQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalCons.
     * @return the TotalCons
     */
    public Number getTotalCons() {
        return (Number) getAttributeInternal(TOTALCONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalCons.
     * @param value value to set the  TotalCons
     */
    public void setTotalCons(Number value) {
        setAttributeInternal(TOTALCONS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemDesc.
     * @return the ItemDesc
     */
    public String getItemDesc() {
        return (String) getAttributeInternal(ITEMDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemDesc.
     * @param value value to set the  ItemDesc
     */
    public void setItemDesc(String value) {
        setAttributeInternal(ITEMDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PerBatchQuantity.
     * @return the PerBatchQuantity
     */
    public Number getPerBatchQuantity() {
        return (Number) getAttributeInternal(PERBATCHQUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PerBatchQuantity.
     * @param value value to set the  PerBatchQuantity
     */
    public void setPerBatchQuantity(Number value) {
        setAttributeInternal(PERBATCHQUANTITY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
