package mnj.mfg.model.entities;

import java.sql.SQLException;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 08 11:26:46 BDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SubProcessEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SubproId {
            public Object get(SubProcessEOImpl obj) {
                return obj.getSubproId();
            }

            public void put(SubProcessEOImpl obj, Object value) {
                obj.setSubproId((Number)value);
            }
        }
        ,
        SubProcess {
            public Object get(SubProcessEOImpl obj) {
                return obj.getSubProcess();
            }

            public void put(SubProcessEOImpl obj, Object value) {
                obj.setSubProcess((String)value);
            }
        }
        ,
        OpLineId {
            public Object get(SubProcessEOImpl obj) {
                return obj.getOpLineId();
            }

            public void put(SubProcessEOImpl obj, Object value) {
                obj.setOpLineId((Number)value);
            }
        }
        ,
        CreatedBy {
            public Object get(SubProcessEOImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(SubProcessEOImpl obj, Object value) {
                obj.setCreatedBy((Number)value);
            }
        }
        ,
        CreationDate {
            public Object get(SubProcessEOImpl obj) {
                return obj.getCreationDate();
            }

            public void put(SubProcessEOImpl obj, Object value) {
                obj.setCreationDate((Date)value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(SubProcessEOImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(SubProcessEOImpl obj, Object value) {
                obj.setLastUpdatedBy((Number)value);
            }
        }
        ,
        LastUpdateDate {
            public Object get(SubProcessEOImpl obj) {
                return obj.getLastUpdateDate();
            }

            public void put(SubProcessEOImpl obj, Object value) {
                obj.setLastUpdateDate((Date)value);
            }
        }
        ,
        DetailRecipesEO {
            public Object get(SubProcessEOImpl obj) {
                return obj.getDetailRecipesEO();
            }

            public void put(SubProcessEOImpl obj, Object value) {
                obj.setDetailRecipesEO((DetailRecipesEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SubProcessEOImpl object);

        public abstract void put(SubProcessEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SUBPROID = AttributesEnum.SubproId.index();
    public static final int SUBPROCESS = AttributesEnum.SubProcess.index();
    public static final int OPLINEID = AttributesEnum.OpLineId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int DETAILRECIPESEO = AttributesEnum.DetailRecipesEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SubProcessEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("mnj.mfg.model.entities.SubProcessEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for OpLineId, using the alias name OpLineId.
     * @return the OpLineId
     */
    public Number getOpLineId() {
        return (Number)getAttributeInternal(OPLINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OpLineId.
     * @param value value to set the OpLineId
     */
    public void setOpLineId(Number value) {
        setAttributeInternal(OPLINEID, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public Number getCreatedBy() {
        return (Number)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date)getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateDate.
     * @param value value to set the LastUpdateDate
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for SubproId, using the alias name SubproId.
     * @return the SubproId
     */
    public Number getSubproId() {
        return (Number)getAttributeInternal(SUBPROID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SubproId.
     * @param value value to set the SubproId
     */
    public void setSubproId(Number value) {
        setAttributeInternal(SUBPROID, value);
    }

    /**
     * Gets the attribute value for SubProcess, using the alias name SubProcess.
     * @return the SubProcess
     */
    public String getSubProcess() {
        return (String)getAttributeInternal(SUBPROCESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for SubProcess.
     * @param value value to set the SubProcess
     */
    public void setSubProcess(String value) {
        setAttributeInternal(SUBPROCESS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity DetailRecipesEOImpl.
     */
    public DetailRecipesEOImpl getDetailRecipesEO() {
        return (DetailRecipesEOImpl)getAttributeInternal(DETAILRECIPESEO);
    }

    /**
     * Sets <code>value</code> as the associated entity DetailRecipesEOImpl.
     */
    public void setDetailRecipesEO(DetailRecipesEOImpl value) {
        setAttributeInternal(DETAILRECIPESEO, value);
    }


    /**
     * @param subproId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number subproId) {
        return new Key(new Object[]{subproId});
    }

    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        oracle.jbo.server.SequenceImpl s =new oracle.jbo.server.SequenceImpl("MNJ_MFG_SUBPRO_DET_S",getDBTransaction());
        oracle.jbo.domain.Number sVal = s.getSequenceNumber();
        setSubproId(sVal); 
    }
    
    /**
        * Custom DML update/insert/delete logic here.
        * @param operation the operation type
        * @param e the transaction event
        */
       protected void doDML(int operation, TransactionEvent e) {
           Map sessionScope = ADFContext.getCurrent().getSessionScope();   
           String user = (String)sessionScope.get("userId");
           String orgId  =(String)sessionScope.get("orgId");
           String unitName  =(String)sessionScope.get("unitName");
           
           System.out.println("ASSES INS DO DML 1 ------------------>"+user);
           System.out.println("ASSES INS DO DML 2------------------>"+orgId);
           System.out.println("ASSES INS DML 3 ------------------>"+unitName);
           
           if(DML_UPDATE == operation){
                     try {
                         
                         setLastUpdateDate((Date)Date.getCurrentDate()); 
                         setLastUpdatedBy(new oracle.jbo.domain.Number(user));
                     } catch (SQLException f) {
                         System.out.println(f.getMessage());
                     }
                 }
                 else if (DML_INSERT == operation){
                  
                     try {
                         
                         //setHeaderNo(getSrNoString());
                         //setOrgId(new oracle.jbo.domain.Number(orgId));
                         //setAttribute1(unitName);
                         setCreationDate((Date)Date.getCurrentDate());  
                         setCreatedBy(new oracle.jbo.domain.Number(user));
                        
                        
                        
                     } catch (SQLException f) {
                         ;
                     }
                 } 
           
           super.doDML(operation, e);
       }


}
